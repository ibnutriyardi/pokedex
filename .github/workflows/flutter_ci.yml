# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flutter CI & Coverage Badge

on:
  push:
    branches: [ "master" ] # TODO: Change to "main" if that's your default branch
  pull_request:
    branches: [ "master" ] # TODO: Change to "main" if that's your default branch

jobs:
  build_test_and_update_badge:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # Default: uses latest stable.
          # To pin to a specific version (e.g., 3.1.3), uncomment the next line and comment out 'channel':
          # flutter-version: '3.1.3'

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze project source
        run: flutter analyze

      - name: Run tests and generate coverage
        run: flutter test --coverage

      - name: Install lcov
        # lcov is needed to parse the lcov.info file for the summary
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Calculate line coverage percentage
        id: coverage_percentage
        run: |
          # More robust way to extract the integer part of the line coverage percentage
          COVERAGE_OUTPUT=$(lcov --summary coverage/lcov.info)
          echo "LCOV Output for lines:"
          echo "$COVERAGE_OUTPUT" | grep "lines......" # Print the line we are parsing
          
          # Extract percentage, then the integer part
          # 1. Grep the line, 2. Use awk to get the field like "91.5%", 3. Use sed to remove non-digits before %, 4. Use sed to remove % and decimals
          COVERAGE_PERCENTAGE_FLOAT=$(echo "$COVERAGE_OUTPUT" | grep "lines......" | awk -F '[ :%]+' '{print $3}')
          echo "Extracted float percentage: $COVERAGE_PERCENTAGE_FLOAT"

          COVERAGE_PERCENTAGE=$(echo "$COVERAGE_PERCENTAGE_FLOAT" | sed 's/\..*//')
          echo "Extracted integer percentage: $COVERAGE_PERCENTAGE"

          if [[ -z "$COVERAGE_PERCENTAGE" ]]; then
            echo "Error: Could not parse coverage percentage. Setting to 0."
            COVERAGE_PERCENTAGE=0
          fi
          
          echo "LINE_COVERAGE=$COVERAGE_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "Final Calculated Line Coverage for badge: $COVERAGE_PERCENTAGE%"

      - name: Generate Coverage Badge URL
        id: badge # Give this step an ID
        run: |
          PERCENTAGE=${{ steps.coverage_percentage.outputs.LINE_COVERAGE }}
          # Determine badge color based on percentage
          COLOR="red" # Default to red
          if (( $(echo "$PERCENTAGE >= 90" | bc -l) )); then
            COLOR="success"  # Green for >= 90%
          elif (( $(echo "$PERCENTAGE >= 75" | bc -l) )); then
            COLOR="yellow"   # Yellow for >= 75%
          elif (( $(echo "$PERCENTAGE >= 50" | bc -l) )); then
            COLOR="orange"   # Orange for >= 50%
          fi
          # Create the badge URL using Shields.io
          BADGE_URL="https://img.shields.io/badge/coverage-$PERCENTAGE%25-$COLOR.svg"
          echo "BADGE_URL=$BADGE_URL" >> $GITHUB_OUTPUT
          echo "Badge URL: $BADGE_URL"

      - name: Update README.md with new badge
        env: # <<< Corrected indentation
          GH_WORKFLOW_PATH: ${{ github.workflow_path }}
        run: | # <<< Corrected indentation
          # Use the environment variable passed to the step
          WORKFLOW_FILE_NAME=$(basename "$GH_WORKFLOW_PATH")
          
          BADGE_MARKDOWN="[![Coverage Badge](${{ steps.badge.outputs.BADGE_URL }})](https://github.com/${{ github.repository }}/actions/workflows/$WORKFLOW_FILE_NAME)"
          
          # awk script to update README.md
          awk -v badge="$BADGE_MARKDOWN" '
          BEGIN { skip=0 }
          /<!-- COVERAGE_BADGE_START -->/ { print; print badge; skip=1; next }
          /<!-- COVERAGE_BADGE_END -->/ { print; skip=0; next }
          !skip { print }
          ' README.md > README.md.tmp && mv README.md.tmp README.md
          echo "README.md updated with new badge."
      
      - name: Commit and push changes to README.md
        # Only commit on push to the default branch (e.g., master or main)
        # to avoid committing changes from PR checks.
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Docs: Update code coverage badge"
          file_pattern: README.md
          # Optional: Specify committer name and email if default is not desired
          # commit_user_name: GitHub Actions Bot
          # commit_user_email: actions@github.com